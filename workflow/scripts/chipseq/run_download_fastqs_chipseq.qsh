#!/bin/bash -ex

#PBS -l nodes=1:ppn=4
#PBS -l mem=60gb
#PBS -l walltime=20:00:00
#PBS -e results/fastqs/chipseq/logs/
#PBS -o results/fastqs/chipseq/logs/
#PBS -N download_srr_fastqs_chipseq
#PBS -m ae
#PBS -j oe
#PBS -V

# example run:
# 1) qsub -t <index1>,<index2>,... workflow/scripts/chipseq/run_download_fastqs_chipseq.qsh
# 2) qsub -t <index-range> workflow/scripts/chipseq/run_download_fastqs_chipseq.qsh
# 3) qsub -t <index1>,<index2>,<index-range1> workflow/scripts/chipseq/run_download_fastqs_chipseq.qsh
# 4) qsub -t <index-range1>,<index-range2>,... workflow/scripts/chipseq/run_download_fastqs_chipseq.qsh
# 5) qsub -t <any combination of index + ranges> workflow/scripts/chipseq/run_download_fastqs_chipseq.qsh


# print start time message
start_time=$(date "+%Y.%m.%d.%H.%M")
echo "Start time: $start_time"

# print start message
echo "Started: download_fastqs_chipseq"

# run bash in strict mode
set -euo pipefail
IFS=$'\n\t'

# make sure to work starting from the base directory for this project 
cd $PBS_O_WORKDIR

# source tool paths
source workflow/source_paths.sh

PATH=/mnt/BioAdHoc/Groups/vd-ay/nrao/hichip_database/data/software/sra_tools/sratoolkit.3.0.0-centos_linux64/bin:$PATH # sra-tools
PATH=/mnt/BioApps/pigz/latest/bin/:$PATH # pigz
PATH=/usr/bin/:$PATH # wget

# extract the sample information using the PBS ARRAYID
IFS=$'\t'
samplesheet="results/samplesheets/fastq/2022.05.13.chipseq_tracker.tsv"
sample_info=( $(cat $samplesheet | sed -n "${PBS_ARRAYID}p") )

# construct the name of the sample using the naming scheme:
# {sample_name}.{gse_id}.{organism}.{target of antibody}.b{biological_rep}
name="${sample_info[0]}"
gse_id="${sample_info[2]}"

organism="${sample_info[11]}"
organism=$(echo "$organism" | awk '{print tolower($0)}') # convert string to lowercase
organism=$(echo "$organism" | awk '{for (i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1') # Capitalize each word

target_of_antibody="${sample_info[15]}"
biological_rep="${sample_info[13]}"

# create sample name and replace spaces with underscores
sample_name="$name.$gse_id.$organism.$target_of_antibody.b$biological_rep"
sample_name="${sample_name// /_}"

srr_id="${sample_info[4]}"

# construct the control file name
# note that the target of antibody name has been replaced with "input" and there is no replicate number
control_sample_name="$name.$gse_id.$organism.input"
control_sample_name="${control_sample_name// /_}"
control_srr_id="${sample_info[7]}"

# printing sample information
echo
echo "Processing"
echo "----------"
echo "sample_name: $sample_name"
echo "srr_id: $srr_id"
echo

# make the output directory
outdir="results/fastqs/chipseq/$sample_name/"
mkdir -p $outdir

# run grabseqs
echo "# running grabseqs"
retries=8
threads=4

$grabseqs sra -o $outdir -r $retries -t $threads $srr_id

# run grabseqs for the control file if it exists, but has not been downloaded yet
if [ ! -z "$control_srr_id" ]
then
    control_outdir="results/fastqs/chipseq/$control_sample_name/"
    if [ ! -d "$control_outdir" ]
    then
        mkdir -p $control_outdir
        $grabseqs sra -o $control_outdir -r $retries -t $threads $control_srr_id
    fi
fi

# print end message
echo "Ended: download_fastqs_chipseq"

# print end time message
end_time=$(date "+%Y.%m.%d.%H.%M")
echo "End time: $end_time"