#!/bin/bash -ex

#SBATCH --job-name=run_chipline
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=16
#SBATCH --mem=200gb
#SBATCH --time=150:00:00
#SBATCH --output=results/peaks/chipline_v2/logs/run_chipline/run_chipline.%A.%a.out
#SBATCH --error=results/peaks/chipline_v2/logs/run_chipline/run_chipline.%A.%a.err
#SBATCH --mail-type=ALL,ARRAY_TASKS

# print start time message
start_time=$(date "+%Y.%m.%d.%H.%M")
echo "Start time: $start_time"

# print start message
echo "Started: run_chipline"

# run bash in strict mode
set -euo pipefail
IFS=$'\n\t'

if [[ ! -v SLURM_ARRAY_TASK_ID ]];
then
    SLURM_ARRAY_TASK_ID=$1
    SLURM_SUBMIT_DIR="."
fi

# make sure to work starting from the base directory for this project 
cd $SLURM_SUBMIT_DIR

# set paths to softwares
PATH=${bowtie2}:$PATH # bowtie2
PATH=/share/apps/picard-tools/picard-tools-2.7.1/:$PATH # picard
PATH=${phantompeakqualtools}:$PATH # phantompeakqualtools
PATH=${software}:$PATH # Utilities "bedGraphToBigWig", "bedSort", "bigBedToBed", "hubCheck", "fetchChromSizes"
PATH=${mamba_env}/lc-pipelines/bin/:$PATH # samtools + others
PATH=${mamba_env}/macs2/bin:$PATH # macs2
PATH=${hichip_db_env}:$PATH

echo "which samtools?"
which samtools

#=================
# main executable script of the ChIP seq pipeline
#=================
# developed by - Sourya Bhattacharyya
# modified by - Nikhil Rao
# modified by - Joaquin Reyna
# Vijay-AY lab
# La Jolla Institute for Allergy and Immunology
#=================

CodeDir="${HOME}/packages/chipline/ChIPLine/"
CodeExec="$CodeDir/bin/pipeline.sh"

#########################################################################################
# setup metadata
#########################################################################################

# extract the sample information
IFS=$'\t'
#samplesheet="results/samplesheets/chipseq/chipseq.chipline.batch1.txt"
#samplesheet="results/samplesheets/chipseq/chipseq.chipline.batch2.txt"
#samplesheet="results/samplesheets/chipseq/chipseq.chipline.pieqtls.txt"
#samplesheet="results/samplesheets/chipseq/chipseq.chipline.2024-rerun-samples.txt"
cell="Mono"
samplesheet="results/fastqs/chipseq_pieqtl/${cell}/${cell}_samplesheet.txt"
sample_info=( $(cat $samplesheet | sed -n "${SLURM_ARRAY_TASK_ID}p") )

sample_name="${sample_info[0]}"
main_srr_combo="${sample_info[1]}"
control_srr_combo="${sample_info[2]}"
ref_genome="${sample_info[3]}"

# set the reference genome
if [ "$ref_genome" = "grch38" ]; then
    echo "Using GRCh38"
    bowtie2_index="${Database_HiChIP_eQTL_GWAS}/Data/RefGenome/bowtie2_index/hg38/hg38"
    macs2_genomesize="hs"
    config="config/chipline/configfile.grch38.txt"
elif [ "$ref_genome" = "mm10" ]; then
    echo "Using mm10"
    bowtie2_index="${Database_HiChIP_eQTL_GWAS}/Data/RefGenome/bowtie2_index/mm10/mm10"
    macs2_genomesize="mm"
    config="config/chipline/configfile.mm10.txt"
fi

## perform a check to make sure the number of reads is greater than 10000
#num_reads=${sample_info[5]}
#if [ "$num_reads" -le "10000" ]; then
#  echo "Sample only has $num_reads reads. Not enough to call peaks!"
#  exit 1
#fi


###############################################################################
# determine if single or paired data
###############################################################################
echo
echo "# determine if single or paired data"

# get the main
#main_srr_dir="results/fastqs/chipseq_v2/srr-geo-combos/$main_srr_combo/"
main_srr_dir="results/fastqs/chipseq_pieqtl/${cell}/$main_srr_combo/"

# listing and splitting fastqs
fastqs_str=$(ls ${main_srr_dir}/${main_srr_combo}*.fastq.gz | tr '[:space:]' ' ')
IFS=" " read -a fastqs_array <<< "$fastqs_str"

# checking the number of fastqs, either 1 (single-end) or 2 (paired-end)
if [ ${#fastqs_array[@]} -gt 1 ];
then
    paired_flag="True"
    echo "This sample used paired-end sequencing."
else
    paired_flag="False"
    echo "This sample used single-end sequencing."
fi


###############################################################################
# extract the control bam 
###############################################################################

# create an array of control bam files aligned to T2T genome
# if the bam files exist, then create a control bam command
if [ "$control_srr_combo" != "N/A" ];
then
    control_srr_dir="results/fastqs/chipseq_v2/control_alignments/${control_srr_combo}/"
    control_bam=$(realpath "${control_srr_dir}/${control_srr_combo}.bam")
else
    control_bam="N/A"
fi

###############################################################################
# run the chipline pipeline 
###############################################################################

# assign the read arguments
if [ "${paired_flag}" == "True" ];
then
    r1_fastq=$(realpath "${main_srr_dir}/${main_srr_combo}_1.fastq.gz")
    r2_fastq=$(realpath "${main_srr_dir}/${main_srr_combo}_2.fastq.gz")
    read_args="-f ${r1_fastq} -r ${r2_fastq}"
else
    fastq=$(realpath "${main_srr_dir}/${main_srr_combo}.fastq.gz")
    read_args="-f ${fastq}"
fi

# assign the control bam argument
if [ "${control_bam}" != "N/A" ];
then
    control_bam_arg="-c $control_bam"
else
    control_bam_arg=""
fi


# setup some additional info
prefix="${sample_name}"
outdir=$(realpath "results/peaks/chipline_v2/${prefix}")
configfile=$(realpath "$config")

# setup the command as a string
overwrite=0 # no
#overwrite=1 # yes

#debug=0 # no
debug=1 # yes

# setup the command as a string
chipline_command="$CodeExec ${read_args} -C $configfile \
                    -n $prefix -g $bowtie2_index -d $outdir -t 16 \
                    -m 25G -T 1 -q 30 -D ${debug} -p ${macs2_genomesize} -O $overwrite ${control_bam_arg}"

# run the command
echo "Running: $chipline_command"
eval $chipline_command


###############################################################################
# logging termination
###############################################################################
echo
echo "# Logging termination"

# print end message
echo "Ended: run_chipline"

# print end time message
end_time=$(date "+%Y.%m.%d.%H.%M")
echo "End time: $end_time"