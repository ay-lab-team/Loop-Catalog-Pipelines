#PBS -l nodes=1:ppn=1
#PBS -l mem=1gb
#PBS -l walltime=200:00:00
#PBS -e results/fastqs/raw/logs/
#PBS -o results/fastqs/raw/logs/
#PBS -N count_reads
#PBS -V
#PBS -t 1-997

# Usage: (out of date)
# Initially I wanted this script to work with a qsub array but 
# there are some technical issues I haven't figured out yet. For now
# we can use this script doing submitting each sample one by one:
# job_ids="1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 21 22 23 24 26 27 28 29 30 31 32 33 34 35 36 37 39 40 41 43 45 46 47 48 49 50 51 52 53 54 55"
# for i in $job_ids; do bash workflow/scripts/hicpro/run_hicpro.qarray.sh $i; done

# # run bash in strict mode
set -euo pipefail
IFS=$'\n\t'

# dummy pbs array environment values
# dummy value when not running with qsub
echo
if [[ -z ${PBS_ARRAYID+x} ]]
then
    echo "Running with bash, setting PBS_ARRAYID=\$1=$1"
    PBS_ARRAYID=$1
    PBS_O_WORKDIR="/mnt/bioadhoc-temp/Groups/vd-ay/hichip-db-loop-calling"
else
    echo "Running with qsub, PBS_ARRAYID=$PBS_ARRAYID"
fi
echo

# print start time message
start_time=$(date "+%Y.%m.%d.%H.%M")
echo "Start time: $start_time"

# print start message
echo "Started: count_reads"

# run bash in strict mode
set -euo pipefail
IFS=$'\n\t'

# make sure to work starting from the base directory for this project 
cd $PBS_O_WORKDIR

# source tool paths
source workflow/source_paths.sh

# extract the sample name + directory listing (no samplesheet) using the PBS ARRAYID
IFS=$'\t'
samplesheet='results/samplesheets/fastq/read_counts.tsv'
sample_info=( $(cat $samplesheet | sed -n "${PBS_ARRAYID}p") )
sample_name="${sample_info[0]}"
srr_file="${sample_info[1]}"
srr_id=$(echo $srr_file | sed -e 's/_R1.fastq.gz//' -e 's/_1.fastq.gz//')

# printing sample information
echo
echo "Processing"
echo "----------"
echo "sample_name: $sample_name"
echo "srr_file: $srr_file"
echo "srr_id: $srr_id"
echo

# make the output directory 
outdir="results/fastqs/stats/${sample_name}/"
mkdir -p $outdir
outfn="results/fastqs/stats/${sample_name}/${sample_name}.${srr_id}.num_reads.txt"

# get the file names
sample_dir="results/fastqs/raw/${sample_name}/"
readarray -t fns < <(find ${sample_dir}/ -name "${srr_id}*.fastq.gz")

# count the number of lines
num_lines=0
for fn in "${fns[@]}";
do
    echo $fn
    curr_lines=$(zcat $fn | wc -l)
    num_lines=$(expr $num_lines + $curr_lines)
    echo $curr_lines
done

# determine the number of read by dividing by 4
num_reads=$(expr $num_lines / 4)
echo $num_reads 
echo $num_reads > $outfn

# print end message
echo "Ended: count_reads"

# print end time message
end_time=$(date "+%Y.%m.%d.%H.%M")
echo "End time: $end_time"
