#SBATCH --job-name count_reads
#SBATCH --mem=1gb
#SBATCH --nodes=1
#SBATCH --time=30:00:00
#SBATCH --error results/fastqs/raw/logs/count_reads.%A.%a.err
#SBATCH --output results/fastqs/raw/logs/count_reads.%A.%a.out
#SBATCH --array 1-997

# # run bash in strict mode
set -euo pipefail
IFS=$'\n\t'

# dummy slurm array environment values
# dummy value when not running with qsub
echo
if [[ -z ${SLURM_ARRAY_TASK_ID+x} ]]
then
    echo "Running with bash, setting SLURM_ARRAY_TASK_ID=\$2=$2"
    samplesheet=$1
    SLURM_ARRAY_TASK_ID=$2
    SLURM_SUBMIT_DIR="/mnt/BioAdHoc/Groups/vd-ay/hichip-db-loop-calling"
else
    echo "Running with qsub, SLURM_ARRAY_TASK_ID=$SLURM_ARRAY_TASK_ID"
fi
echo

# print start time message
start_time=$(date "+%Y.%m.%d.%H.%M")
echo "Start time: $start_time"

# print start message
echo "Started: count_reads"

# make sure to work starting from the base directory for this project 
cd $SLURM_SUBMIT_DIR

# source tool paths
source workflow/source_paths.sh

# extract the sample name + directory listing (no samplesheet) using the PBS ARRAYID
IFS=$'\t'
sample_info=( $(cat $samplesheet | sed -n "${SLURM_ARRAY_TASK_ID}p") )
sample_name="${sample_info[0]}"
srr_file="${sample_info[1]}"
srr_id=$(echo $srr_file | sed -e 's/_R1.fastq.gz//' -e 's/_1.fastq.gz//')

# printing sample information
echo
echo "Processing"
echo "----------"
echo "sample_name: $sample_name"
echo "srr_file: $srr_file"
echo "srr_id: $srr_id"
echo

# make the output directory 
outdir="results/fastqs/stats/${sample_name}/"
mkdir -p $outdir
outfn="results/fastqs/stats/${sample_name}/${sample_name}.${srr_id}.num_reads.txt"

# get the file names (note: current implementation counts R2 files as well)
sample_dir="results/fastqs/raw/${sample_name}/"
readarray -t fns < <(find ${sample_dir}/ -name "${srr_id}*.fastq.gz")

# run if the output file has not already been generated
if [! -e $outfn ];
then
    # count the number of lines
    echo "# count the number of lines"
    num_lines=0
    for fn in "${fns[@]}";
    do
        echo $fn
        curr_lines=$(zcat $fn | wc -l)
        num_lines=$(expr $num_lines + $curr_lines)
        echo $curr_lines
    done

    # determine the number of read by dividing by 4
    echo "# determine the number of read by dividing by 4"
    num_reads=$(expr $num_lines / 4)
    echo $num_reads 
    #echo $num_reads > $outfn
else
    echo "Already generated results at: $outfn"
fi

# print end message
echo "Ended: count_reads"

# print end time message
end_time=$(date "+%Y.%m.%d.%H.%M")
echo "End time: $end_time"
